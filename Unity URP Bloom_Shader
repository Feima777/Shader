Shader "Hidden/URP/Bloom"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
    }
    
    SubShader
    {
        Cull Off ZWrite Off ZTest Always
        
        // Pass 0: Prefilter 
        Pass
        {
            Name "Prefilter"
            
            HLSLPROGRAM
            #pragma vertex Vert
            #pragma fragment Prefilter
            
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            
            TEXTURE2D(_MainTex);
            SAMPLER(sampler_MainTex);
            
            float _Threshold;
            float _SoftKnee;
            float4 _MainTex_TexelSize;
            
            struct Attributes
            {
                float4 positionOS : POSITION;
                float2 uv : TEXCOORD0;
            };
            
            struct Varyings
            {
                float4 positionCS : SV_POSITION;
                float2 uv : TEXCOORD0;
            };
            
            Varyings Vert(Attributes input)
            {
                Varyings output;
                output.positionCS = TransformObjectToHClip(input.positionOS.xyz);
                output.uv = input.uv;
                return output;
            }
            
            half4 Prefilter(Varyings input) : SV_Target
            {
                half3 color = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, input.uv).rgb;
                
                // 亮度计算
                half brightness = max(color.r, max(color.g, color.b));
                half soft = brightness - _Threshold + _SoftKnee;
                soft = clamp(soft, 0, 2 * _SoftKnee);
                soft = soft * soft / (4 * _SoftKnee + 1e-5);
                
                // Apply threshold
                half multiplier = max(brightness - _Threshold, soft) / max(brightness, 1e-5);
                color *= multiplier;
                
                return half4(color, 1);
            }
            ENDHLSL
        }
        
        // Pass 1: Downsample
        Pass
        {
            Name "Downsample"
            
            HLSLPROGRAM
            #pragma vertex Vert
            #pragma fragment Downsample
            
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            
            TEXTURE2D(_MainTex);
            SAMPLER(sampler_MainTex);
            float4 _MainTex_TexelSize;
            
            struct Attributes
            {
                float4 positionOS : POSITION;
                float2 uv : TEXCOORD0;
            };
            
            struct Varyings
            {
                float4 positionCS : SV_POSITION;
                float2 uv : TEXCOORD0;
            };
            
            Varyings Vert(Attributes input)
            {
                Varyings output;
                output.positionCS = TransformObjectToHClip(input.positionOS.xyz);
                output.uv = input.uv;
                return output;
            }
            
            half4 Downsample(Varyings input) : SV_Target
            {
                float2 texelSize = _MainTex_TexelSize.xy;
                float4 d = texelSize.xyxy * float4(-1, -1, +1, +1);
                
                half3 s0 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, input.uv + d.xy).rgb;
                half3 s1 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, input.uv + d.zy).rgb;
                half3 s2 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, input.uv + d.xw).rgb;
                half3 s3 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, input.uv + d.zw).rgb;
                
                half3 color = (s0 + s1 + s2 + s3) * 0.25;
                return half4(color, 1);
            }
            ENDHLSL
        }
        
        // Pass 2: Upsample
        Pass
        {
            Name "Upsample"
            
            Blend One One
            
            HLSLPROGRAM
            #pragma vertex Vert
            #pragma fragment Upsample
            
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            
            TEXTURE2D(_MainTex);
            SAMPLER(sampler_MainTex);
            TEXTURE2D(_SourceTex);
            SAMPLER(sampler_SourceTex);
            
            float4 _MainTex_TexelSize;
            float _Intensity;
            
            struct Attributes
            {
                float4 positionOS : POSITION;
                float2 uv : TEXCOORD0;
            };
            
            struct Varyings
            {
                float4 positionCS : SV_POSITION;
                float2 uv : TEXCOORD0;
            };
            
            Varyings Vert(Attributes input)
            {
                Varyings output;
                output.positionCS = TransformObjectToHClip(input.positionOS.xyz);
                output.uv = input.uv;
                return output;
            }
            
            half4 Upsample(Varyings input) : SV_Target
            {
                half4 bloom = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, input.uv);
                // half4 source = SAMPLE_TEXTURE2D(_SourceTex, sampler_SourceTex, input.uv);
                return bloom * _Intensity;
            }
            ENDHLSL
        }
        
        // Pass 3: Composite
        Pass
        {
            Name "Composite"
            
            HLSLPROGRAM
            #pragma vertex Vert
            #pragma fragment Composite
            
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            
            TEXTURE2D(_MainTex);
            SAMPLER(sampler_MainTex);
            TEXTURE2D(_BloomTex);
            SAMPLER(sampler_BloomTex);
            
            float4 _Tint;
            float _Intensity;
            
            struct Attributes
            {
                float4 positionOS : POSITION;
                float2 uv : TEXCOORD0;
            };
            
            struct Varyings
            {
                float4 positionCS : SV_POSITION;
                float2 uv : TEXCOORD0;
            };
            
            Varyings Vert(Attributes input)
            {
                Varyings output;
                output.positionCS = TransformObjectToHClip(input.positionOS.xyz);
                output.uv = input.uv;
                return output;
            }
            
            half4 Composite(Varyings input) : SV_Target
            {
                half4 source = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, input.uv);
                half4 bloom = SAMPLE_TEXTURE2D(_BloomTex, sampler_BloomTex, input.uv);
                bloom.rgb *= _Tint.rgb * _Tint.a;
                return source + bloom * _Intensity;
            }
            ENDHLSL
        }
    }
}
