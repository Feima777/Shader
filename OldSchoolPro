Shader "AP1/L10/OldSchoolPro" {
    Properties {
        [Header(Texture)]
            [NoScaleOffset] _MainTex    ("RGB:基础色贴图 , A:AO" , 2D)          = "white" {}
            [NoScaleOffset] [Normal] _NormalMap     ("法线贴图" , 2D)           = "bump" {}
            [NoScaleOffset] _SpecTex    ("RGB:高光贴图 , A:高光次幂" , 2D)       = "gray" {}
            [NoScaleOffset] _Cubemap    ("环境贴图" , Cube)                     = "_skybox" {}
        [Header(Diffuse)]
            _MainCol    ("基础色" , Color)                      = (0.5 , 0.5 , 0.5 , 1.0)
            _EnvDiffInt ("环境漫反射颜色" , Range(0 , 1))        = 0.2
            _EnvUpCol   ("环境天顶颜色" , Color)                 = (1.0 , 1.0 , 1.0 , 1.0)
            _EnvSideCol ("环境周围颜色" , Color)                 = (0.5 , 0.5 , 0.5 , 1.0)
            _EnvDownCol ("环境地表颜色" , Color)                 = (0.0 , 0.0 , 0.0 , 1.0)
        [Header(Specular)]
            _SpecPow    ("高光次幂" , Range(1 , 90))             = 30
            _EnvSpecInt ("环境镜面反射强度" , Range(0 , 5))      = 0.2
            _FresnelPow ("菲涅尔次幂" , Range(0 , 5))            = 1
            _CubemapMip ("环境球Mip" , Range(0 , 7))             = 0
    }
    SubShader {
        Tags {
            "RenderType"="Opaque"
        }
        Pass {
            Name "FORWARD"
            Tags {
                "LightMode"="ForwardBase"
            }
            
            
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"
            //阴影所需的库
            #include "AutoLight.cginc"
            #include "Lighting.cginc"
            //环境颜色所需的库
            #include "../cginc/MyCginc.cginc"

            #pragma multi_compile_fwdbase_fullshadows
            #pragma target 3.0

            //Texture
            uniform sampler2D _MainTex;
            uniform sampler2D _NormalMap;
            uniform sampler2D _SpecTex;
            uniform samplerCUBE _Cubemap;

            //Diffuse
            uniform float3 _MainCol;
            uniform float _EnvDiffInt;
            uniform float3 _EnvUpCol;
            uniform float3 _EnvSideCol;
            uniform float3 _EnvDownCol;

            //Specular
            uniform float _SpecPow;
            uniform float _EnvSpecInt;
            uniform float _FresnelPow;
            uniform float _CubemapMip;

            //输入结构
            struct VertexInput {
                float4 vertex  : POSITION;      //顶点信息
                float2 uv0     : TEXCOORD0;     //uv信息
                float3 normal  : NORMAL;        //法线信息
                float4 tangent : TANGENT;       //切线信息
            };
            //输出结构
            struct VertexOutput {
                float4 pos    : SV_POSITION;    //屏幕顶点位置
                float2 uv0    : TEXCOORD0;      //UV0
                float4 posWS  : TEXCOORD1;      //世界空间顶点位置
                half3 nDirWS  : TEXCOORD2;      //世界空间法线位置
                half3 tDirWS  : TEXCOORD3;      //世界空间切线位置
                half3 bDirWS  : TEXCOORD4;      //世界空间副切线位置
                LIGHTING_COORDS(5,6)
            };
            //输入结构>>>顶点shader>>>输出结构
            VertexOutput vert (VertexInput v) {
                VertexOutput o = (VertexOutput)0;               //新建输出结构
                o.pos = UnityObjectToClipPos( v.vertex );       //顶点位置 物体空间转到世界裁剪空间
                o.uv0 = v.uv0;                                  //传递UV
                o.posWS = mul(unity_ObjectToWorld,v.vertex);    //顶点位置 物体空间转到世界裁剪空间 mul表示矩阵与向量相乘
                o.nDirWS = o.nDirWS = UnityObjectToWorldNormal(v.normal);
                o.tDirWS = normalize(mul(unity_ObjectToWorld , float4(v.tangent.xyz , 0.0)).xyz);   //切线方向 物体空间转到世界裁剪空间
                o.bDirWS = normalize(cross(o.nDirWS , o.tDirWS) * v.tangent.w); //副切线方向
                TRANSFER_VERTEX_TO_FRAGMENT(o);                 //投影相关
                return o;                                       //返回输出结构
            }
            //输出结构>>像素
            float4 frag(VertexOutput i) : COLOR {
                //向量准备
                float3 nDirTS = UnpackNormal(tex2D(_NormalMap , i.uv0)).rgb;
                float3x3 TBN = float3x3(i.tDirWS , i.bDirWS , i.nDirWS);
                float3 nDirWS = normalize(mul(nDirTS , TBN));
                float3 vDirWS = normalize(_WorldSpaceCameraPos.xyz - i.posWS.xyz);
                float3 vrDirWs = reflect(-vDirWS , nDirWS);
                float3 lDirWS = _WorldSpaceLightPos0.xyz;
                float3 lrDirWS = reflect(-lDirWS , nDirWS);
                //中间量准备（点乘结果）
                float ndotl = dot(nDirWS , lDirWS);         //兰伯特
                float vdotr = dot(vDirWS , lrDirWS);        //Phong
                float vdotn = dot(vDirWS , nDirWS);         //菲涅尔
                //纹理采样
                float4 var_MainTex = tex2D(_MainTex , i.uv0);
                float4 var_SpecTex = tex2D(_SpecTex , i.uv0);
                float cubemapMip = lerp(_CubemapMip , 0.0 ,var_SpecTex.a);
                float3 var_Cubemap = texCUBElod(_Cubemap , float4(vrDirWs , cubemapMip)).rgb;
                //光照模型
                    //光源漫反射
                    float3 BaseCol = var_MainTex.rgb * _MainCol;
                    float Lambert = max(0.0 , ndotl);
                    //光源镜面反射
                    float SpecCol = var_SpecTex.rgb;
                    float SpecPow = lerp(1.0 , _SpecPow , var_SpecTex.a);
                    float Phong = pow(max(0.0 , vdotr) , SpecPow);
                    //光源反射混合
                    float shadow = LIGHT_ATTENUATION(i);
                    float3 DirLighting = (BaseCol * Lambert + SpecCol * Phong) * shadow;
                    //环境漫反射
                    float3 EnvCol = TriColAmbient(nDirWS , _EnvUpCol , _EnvSideCol , _EnvDownCol);
                    float3 EnvDiff = BaseCol * EnvCol * _EnvDiffInt;
                    //环境镜面反射
                    float Fresnel = pow(max(0.0 , 1 - vdotn) , _FresnelPow);
                    float3 EnvSpec = var_Cubemap * Fresnel * _EnvSpecInt;
                    //环境反射混合
                    float Occlusion = var_MainTex.a;
                    float3 EnvLighting = ((EnvDiff + EnvSpec) * var_SpecTex.a) * Occlusion;
                    //最终混合
                    float3 FinalRGB = DirLighting + EnvLighting;
                //返回值
                return float4(FinalRGB , 1.0);
            }
            ENDCG
        }
    }
    FallBack "Diffuse"
}
